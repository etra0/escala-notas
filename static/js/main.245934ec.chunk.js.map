{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","type","ParameterInput","props","keyName","values","handler","name","value","className","TextField","label","onChange","v","target","fullWidth","InputProps","endAdornment","error","isNaN","App","useState","parameters","setParameters","useEffect","data","JSON","parse","localStorage","getItem","exigencia","notaAprobacion","notaMin","notaMax","puntajeMin","puntajeMax","incremento","tableData","setTableData","setValidTable","changeValue","key","_p","stringify","isValid","Object","keys","reduce","acc","parseFloat","forEach","length","calc","p","puntajeAprobacion","m1","a1","m2","a2","arr","i","id","push","score","grade","toFixed","setItem","columns","field","headerName","width","cellClassName","params","ThemeProvider","Grid","container","spacing","item","xs","md","map","style","minHeight","rows","autoPageSize","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.245934ec.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport \"./App.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\"\r\n  }\r\n});\r\n\r\n// function ScoreTable(props) {\r\n//   const { rows, valid, notaAprobacion } = props;\r\n\r\n//   return (\r\n//     <Fade in={valid}>\r\n//       <Table>\r\n//         <TableHead>\r\n//           <TableRow>\r\n//             <TableCell>Puntos</TableCell>\r\n//             <TableCell>Nota</TableCell>\r\n//           </TableRow>\r\n//         </TableHead>\r\n//         <TableBody>\r\n//           {rows.map(([p, n]) => (\r\n//             <TableRow key={p}>\r\n//               <TableCell>{p}</TableCell>\r\n//               <TableCell\r\n//                 style={{ color: n.toFixed(1) < parseFloat(notaAprobacion) ? \"#f34a4a\" : \"white\" }}\r\n//               >\r\n//                 {n.toFixed(1)}\r\n//               </TableCell>\r\n//             </TableRow>\r\n//           ))}\r\n//         </TableBody>\r\n//       </Table>\r\n//     </Fade>\r\n//   );\r\n// }\r\n\r\nfunction ParameterInput(props) {\r\n  const { keyName, values, handler } = props;\r\n  const { name, value } = values;\r\n\r\n  return (\r\n    <div className=\"input-box\">\r\n      <TextField\r\n        label={name}\r\n        onChange={v => handler(keyName, v.target.value)}\r\n        type=\"number\"\r\n        fullWidth={true}\r\n        value={value}\r\n        InputProps={keyName === \"exigencia\" ? { endAdornment: \"%\" } : {}}\r\n        error={isNaN(value) || value < 0}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [parameters, setParameters] = useState({});\r\n  useEffect(() => {\r\n    const dataTemplate = {\r\n      exigencia: { name: \"Exigencia\", value: 60 },\r\n      notaAprobacion: { name: \"Nota aprobación\", value: 4.0 },\r\n      notaMin: { name: \"Nota mínima\", value: 2.0 },\r\n      notaMax: { name: \"Nota máxima\", value: 7.0 },\r\n      puntajeMin: { name: \"Puntaje mínimo\", value: 0 },\r\n      puntajeMax: { name: \"Puntaje máximo\", value: 100 },\r\n      incremento: { name: \"Incremento\", value: 1 }\r\n    }\r\n\r\n    const data = JSON.parse(localStorage.getItem('data')) || dataTemplate;\r\n    setParameters(data);\r\n  }, [])\r\n\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [validTable, setValidTable] = useState(false);\r\n\r\n  const changeValue = (key, value) => {\r\n    const _p = JSON.parse(JSON.stringify(parameters));\r\n    _p[key].value = value;\r\n    setParameters(_p);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const isValid =\r\n      Object.keys(parameters).reduce(\r\n        (acc, v) =>\r\n          acc +\r\n          (typeof parameters[v].value === \"undefined\" ||\r\n            isNaN(parseFloat(parameters[v].value))),\r\n        0\r\n      ) === 0;\r\n    setValidTable(isValid);\r\n\r\n    const _p = JSON.parse(JSON.stringify(parameters));\r\n    Object.keys(_p).forEach(v => (_p[v].values = parseFloat(_p[v].values)));\r\n\r\n    if (Object.keys(_p).length === 0 || _p.incremento.value <= 0 || !isValid) return;\r\n    let calc = p => {\r\n      let exigencia = _p.exigencia.value / 100.;\r\n      let puntajeAprobacion = _p.puntajeMax.value * exigencia;\r\n      let m1 =\r\n        (_p.notaAprobacion.value - _p.notaMin.value) /\r\n        (puntajeAprobacion - _p.puntajeMin.value);\r\n      let a1 = _p.notaMin.value - m1 * _p.puntajeMin.value;\r\n\r\n      let m2 =\r\n        (_p.notaMax.value - _p.notaAprobacion.value) /\r\n        (_p.puntajeMax.value - puntajeAprobacion);\r\n      let a2 = _p.notaMax.value - m2 * _p.puntajeMax.value;\r\n\r\n\r\n      return p >= puntajeAprobacion ? m2 * p + a2 : m1 * p + a1;\r\n    };\r\n\r\n    let arr = [];\r\n    for (\r\n      let i = +_p.puntajeMin.value, id = 0;\r\n      i <= +_p.puntajeMax.value;\r\n      i += +_p.incremento.value, id++\r\n    ) {\r\n      arr.push({id: id, score: +i, grade: calc(i).toFixed(1)});\r\n    }\r\n\r\n    setTableData(arr);\r\n    localStorage.setItem('data', JSON.stringify(_p));\r\n\r\n  }, [parameters]);\r\n\r\n  const columns = [\r\n    {field: \"score\", headerName: \"Puntaje\", width: 150},\r\n    {field: \"grade\", headerName: \"Nota\", width: 150, \r\n      cellClassName: (params) =>  (+params.value) < (+parameters.notaAprobacion.value) ? \"rojo\" : \"\" },\r\n  ];\r\n\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <div className=\"App-body\">\r\n          <div className=\"App-content\">\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={4}>\r\n                {Object.keys(parameters).map(v => (\r\n                  <ParameterInput\r\n                    key={v}\r\n                    keyName={v}\r\n                    values={parameters[v]}\r\n                    handler={changeValue}\r\n                  />\r\n                ))}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={8} style={{width: \"100%\", minHeight: \"400px\"}}>\r\n                <DataGrid\r\n                 rows={tableData}\r\n                 columns={columns}\r\n                 autoPageSize={true}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}